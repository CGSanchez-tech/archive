For the main file app.py, the biggest hurdle was running the boiler plate correctly, it
was a little and did not come with a read me. 

We ended up using a virtual environment to create an isolated space where dependences and 
packages are consistent, and we were able to work with the given code and dataset.

But we first had this idea to use a virtual environment, not for effeciency, but instead 
because we tried using tensorflow and fell into a bunch of issues. By looking through some
documentation, we learned that pip/python 3.11 had to be used, among other things (that i can't remember)

After making sure we understood the boiler plate, we timed each section of the code and realized that 
it took a little too long, about 10 minutes to predict one image. 

First idea was to load in images faster by importing Pool and using multiprocessor [define that library later]
but funny things happened and later on through Github we found out that there was a bug when using multiprocessing
in a virtual environment, so we just put that idea aside. Most of the running time of the code
wasn't even during that loading time. 

Moved on to prompting a user for input...




Links:
Tensor flow install: https://www.tensorflow.org/install
Github multiprocessing in virtual env bug: https://github.com/python/cpython/issues/98360 

